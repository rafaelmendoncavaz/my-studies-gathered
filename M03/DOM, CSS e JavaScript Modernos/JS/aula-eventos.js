// Um evento √© uma a√ß√£o ou um movimento que acontece na p√°gina. Os eventos acontecem a todo momento. 

// Os eventos permitem que voc√™ responda a intera√ß√µes do usu√°rio, como cliques do mouse, pressionamentos de teclas, movimentos do mouse outros eventos relacionados √† intera√ß√£o do usu√°rio com uma p√°gina da web.

const button = document.querySelector('button')
const p = document.querySelector('p')

let counter = 0
// Este √© o comando para 'interceptar' o evento: addEventListener
// o segundo comando √© uma fun√ß√£o 'callback', que ir√° executar toda a vez que o evento ocorrer
button.addEventListener('click', function (event) {
    event.preventDefault()
    event.stopPropagation()
    counter++
    p.innerText = counter
    console.log('Clicou no bot√£o')
    console.log('target -> ', event.target)
    console.log('currentTarget -> ', event.currentTarget)
})

// Quais s√£o os tipos de eventos?

// Existem v√°rios tipos de eventos dispon√≠veis em JavaScript, incluindo eventos de mouse (como cliques e movimentos), eventos de teclado (como pressionamentos de teclas), eventos de formul√°rio (como envio de formul√°rio), eventos de carregamento da p√°gina (como load e DOMContentLoaded), eventos de temporizador (como setTimeout e setInterval), e muitos outros:

// Os mais comuns s√£o os eventos de mouse, como o click, que √© disparado quando um elemento √© clicado, o dbclick (do ingl√™s double click), quando ocorre um clique duplo, ou mouseover, quando o mouse passa sobre um elemento.

// Eventos de foco, como o focus, que ocorre quando o elemento recebe foco (quando voc√™ clica num campo de um formul√°rio para come√ßar a digitar), ou o blur, que ocorre quando o elemento perde o foco, entre outros.

// Eventos de formul√°rio, como o submit, que acontece quando o formul√°rio √© enviado.

// Eventos de input, como o input (sim, esse √© o nome do evento), que √© disparado sempre que o usu√°rio faz alguma modifica√ß√£o no valor de um campo, seja ele um input, select, ou textarea.

// Eventos de teclado, como o keydown, que √© disparado sempre que uma tecla √© pressionada. Ou o keyup, que √© disparado depois que a tecla pressionada, for solta/liberada.

// Eventos de carregamento de p√°gina, como o DOMContentLoaded, que √© disparado quando o documento √© completamente carregado, ou o unload quando uma p√°gina √© fechada.

// üìò Aula - Bubbling e Capturing

// Quando um evento √© acionado, nem sempre ele acontece imediatamente ap√≥s ser acionado. Existem duas fases que determinam quando o evento ser√° tratado de fato. Essas fases n√≥s chamamos de capturing ou fase de captura e bubbling ou fase de borbulhamento.

// Na fase de capturing, o navegador come√ßa verificando se existe algum handler para o evento ocorrido a partir do root da p√°gina, ou seja, pelo <html>, e assim vai verificando todos os filhos imediatos at√© chegar no elemento onde ocorreu o evento.

// Na fase de bubbling, acontece o contr√°rio. O navegador come√ßa verificando a partir do elemento clicado, e vai 'subindo', e verificando o pai imediato de cada elemento, at√© chegar ao root da p√°gina, ou seja, o <html>.

// üìò Aula - Propriedades do Objeto Evento

// target - referencia ao elemento no qual o evento iniciou

// currentTarget - Identifica o elemento no qual o evento est√°/destino atual

// üìò Aula - M√©todos do Objeto Evento

// preventDefault() - Interrompe o comportamento padr√£o do browser. Faz com que algo que seria executado normalmente, n√£o seja

// stopPropagation() - Interrompe a propaga√ß√£o dos eventos do mesmo tipo do evento de origem na fase de 'bubbling' ou 'capturing'.

const body = document.querySelector('body')

body.addEventListener('click', function(event) {
    console.log('clicou no body')
    counter--
    p.innerText = counter
    console.log('target -> ',event.target)
    console.log('currentTarget -> ',event.currentTarget)
}, false)