// AULA STRINGS
/*
Uma string √© um tipo de dado em JavaScript que representa um texto. √â uma sequ√™ncia de caracteres que podem ser letras, n√∫meros, s√≠mbolos, espa√ßos, etc. Uma string pode ser delimitada por aspas simples (') ou aspas duplas ("), desde que sejam consistentes na abertura e fechamento da string.

Strings s√£o imut√°veis em Javascript, o que significa que uma vez que uma string √© criada, seu conte√∫do n√£o pode ser alterado. No entanto, √© poss√≠vel manipular ou concatenar (combinar) strings para criar novas strings.

Al√©m disso, existem diversas fun√ß√µes e m√©todos prontos para trabalhar com strings em JavaScript, como por exemplo: length (para retornar o comprimento da string), toUpperCase (para converter a string para letras mai√∫sculas), toLowerCase (para converter a string para letras min√∫sculas), substring (para extrair uma parte da string), etc.

Aqui est√£o alguns exemplos de uso das fun√ß√µes toUpperCase e toLowerCase em JavaScript:
*/
const nameIs = "Rafael Mendon√ßa Vaz";
console.log (nameIs);
const uppercaseName = nameIs.toUpperCase();
console.log (uppercaseName);
const lowercaseName = nameIs.toLowerCase();
console.log(lowercaseName);
const substringName = nameIs.substring(7, 16);
console.log (substringName);

// CONCATENANDO STRINGS

/* 
Concatenar significa juntar ou unir duas ou mais strings em uma √∫nica string. Por exemplo, voc√™ pode ter duas strings "Ol√°" e "mundo" e concaten√°-las para formar a string "Ol√° mundo". Em programa√ß√£o, existem v√°rias maneiras de concatenar strings, como usando o operador + ou o m√©todo concat. A concatena√ß√£o √© frequentemente usada para juntar diferentes partes de uma string para formar uma string mais complexa.

Aqui est√£o alguns exemplos de como fazer isso:
*/

const firstString = "Ol√°";
const secondString = "Mundo";
// CONCATENANDO COM O OPERADOR ( + )
const thirdString = firstString + " " + secondString + ", Me chamo " + nameIs;
console.log (thirdString);

// CONCATENANDO COM O M√âTODO ( CONCAT )
const fourthString = firstString.concat(" ", secondString, ", Me chamo ", nameIs);
console.log(fourthString);

// TEMPLATE STRINGS

/* 
As template strings s√£o uma maneira de concatenar strings em JavaScript que oferecem mais recursos e facilidade de uso do que a concatena√ß√£o convencional. Elas s√£o definidas usando crases (``) ao inv√©s de aspas simples ou duplas. Exemplo de como usar template strings:
*/

const ageIs = 27;
const cityIs = "Cascavel";

// Usando Template Strings com v√°rias vari√°veis
const messageIs = `Ol√°, meu nome √© ${nameIs} e tenho ${ageIs} anos. Atualmente moro em ${cityIs}`
console.log(messageIs);

/* 
Como voc√™ pode ver, ao usar template strings, √© poss√≠vel incluir vari√°veis diretamente na string, sem precisar concaten√°-las manualmente. As vari√°veis s√£o inclu√≠das dentro de chaves ${} e s√£o avaliadas antes de serem inseridas na string final. Al√©m disso, as template strings tamb√©m permitem que voc√™ insira quebras de linha e outros caracteres especiais diretamente na string.
*/

// CONVERTENDO STRINGS PARA N√öMEROS

/* 
Em JavaScript, h√° duas maneiras principais de converter strings para n√∫meros: parseInt e parseFloat. Aqui est√£o alguns exemplos de como us√°-los:
*/

const number1 = "10";
const number2 = "20.5";
console.log(number1, typeof number1, number2, typeof number2);

const result1 = parseInt(number1);
console.log(result1, typeof result1);

const result2 = parseFloat(number2);
console.log(result2, typeof result2);

/* 
Em ambos os casos, o m√©todo retorna o valor num√©rico equivalente √† string passada como par√¢metro. Se a string n√£o puder ser convertida em um n√∫mero v√°lido, ambos os m√©todos retornar√£o NaN (Not a Number). √â importante verificar o resultado dessas convers√µes antes de us√°-las em c√°lculos, para garantir que sejam v√°lidas.
*/

// üí™ Atividade - Trabalhando com Strings

console.log("Atividade 1");
const firstName = "Jo√£o";
const lastName = "Silva";
const fullName = firstName + " " + lastName;
console.log(fullName);

console.log("Atividade 2");
const hello = "Hello"
const world = "world"
const helloworld = hello.concat(world);
console.log(helloworld);

console.log("Atividade 3");
const decimal = "12.5";
const wholeNumber = parseInt(decimal);
console.log(wholeNumber, typeof wholeNumber);

console.log("Atividade 4");
const twelve = "12"
const numberTwelve = parseInt(twelve);
console.log(numberTwelve, typeof numberTwelve);

console.log("Atividade 5");
const three = "3"
console.log(twelve, three, typeof twelve, typeof three);
const numberThree = parseInt(three);
const fifteen = numberTwelve + numberThree;
console.log(fifteen, typeof fifteen);
