// NO ELSE RETURN & TIPOS PRIMITIVOS

// O no-else-return √© uma T√âCNICA usada na programa√ß√£o que tem como objetivo tornar o c√≥digo mais leg√≠vel, permitindo a elimina√ß√£o de else desnecess√°rios em nossos projetos.

function isPositive(number) {
    if (number > 0) {
      return true;
      console.log('Esse console nunca ser√° mostrado');
    } else {
      return false;
      console.log('Esse console nunca ser√° mostrado');
    }
  
    console.log('Esse console nunca ser√° mostrado');
}
  
console.log(isPositive(2));
// Sa√≠da: true

// Al√©m de retornar um valor, o comando return finaliza a fun√ß√£o, impedindo a execu√ß√£o de qualquer c√≥digo subsequente. Analisando um pouco a fun√ß√£o anterior

// E √© aqui que a t√©cnica no-else-return entra em a√ß√£o. Como o comando return finaliza qualquer fun√ß√£o, caso a condi√ß√£o seja satisfeita, a fun√ß√£o ser√° finalizada. Portanto, podemos refatorar a fun√ß√£o anterior para um c√≥digo mais simples e conciso, como mostrado abaixo:

function isNumber(number) {
    if (number > 0) {
      return true;
    } 
  
    return false;
}
  
console.log(isNumber(2));
// Sa√≠da: true

// TIPOS PRIMITIVOS
console.log("Tipos Primitivos")

// Em JavaScript, os m√©todos s√£o fun√ß√µes que realizam opera√ß√µes, tratam dados e muitas vezes simplificam a maneira como obtemos resultados. Eles s√£o uma parte fundamental da linguagem e podem ser usados para executar a√ß√µes espec√≠ficas em dados.

// Existem v√°rios tipos de m√©todos nativos dispon√≠veis em JavaScript que podem ajudar no desenvolvimento de projetos. Alguns m√©todos s√£o usados para manipula√ß√£o de strings, enquanto outros s√£o usados para trabalhar com n√∫meros, arrays, objetos entre outros. A escolha do m√©todo certo depender√° do tipo de problema que estamos tentando resolver e do tipo de dado que estamos trabalhando.

// EXEMPLOS:

let phrase = "Estou estudando JavaScript, e estou gostando muito de JavaScript"
console.log(phrase);

phrase = phrase.replace("JavaScript", "HTML")
// ou replaceAll para substituir todas as palavras que se repetem na frase
console.log(phrase);

phrase = phrase.startsWith('Est', 0); // Checa se o valor come√ßa com 'Est' no √≠ndice 0

let number = 10.0039487
console.log(number);
number = number.toFixed(3); // Reduz a leitura das casas decimais e transforma em string
console.log(number); // Output = 10.003
console.log(Number.isInteger(number)); // Checa se √© um n√∫mero inteiro ou n√£o e retorna true/false

number = parseFloat(number); // Transforma a string em n√∫mero decimal
console.log(number);

number = parseInt(number); // Transforma o valor/string em n√∫mero inteiro
console.log(number);

// üí™ Atividade - Utilizando M√©todos

console.log("Atividade 1");
function changeablePhrase(phrase, oldWord, newWord) {
    let newPhrase = phrase
    for(let i = 0; i < phrase.length; i++) {
        if(phrase.startsWith(oldWord, [i])) {
            newPhrase = phrase.replace(oldWord, newWord)
            phrase = newPhrase
        }
    }
    return newPhrase
}
console.log(changeablePhrase("I am a man of principles, and I must seek my principles", "principles", "Fortune"))

console.log("Atividade 2");
function finalGrade(grade1, grade2, grade3) {
    let gpa = ((grade1 + grade2 + grade3) / 3).toFixed(1);
    return `A m√©dia do aluno √© <${parseFloat(gpa)}>`
}
console.log(finalGrade(7.41, 8.35, 9.97))

console.log("Atividade 3");
function totalAmount(unitValue, quantity) {
    let checkOut = (unitValue * quantity)
    if (quantity >= 5 && quantity < 10) {
        checkOut *= 0.9
    } else if (quantity >= 10) {
        checkOut *= 0.8
    } 
    return `O valor da compra √© $${parseFloat(checkOut.toFixed(2))}`
}
console.log(totalAmount(4.272, 10))