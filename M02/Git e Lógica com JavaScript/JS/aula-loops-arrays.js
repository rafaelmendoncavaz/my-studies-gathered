// LOOPS & ARRAYS

// LOOPS

// Estruturas de repeti√ß√£o, tamb√©m conhecidas como loops, s√£o um recurso fundamental na programa√ß√£o em JavaScript (e em outras linguagens de programa√ß√£o). Uma estrutura de repeti√ß√£o permite que um bloco de c√≥digo seja executado repetidamente, enquanto uma determinada condi√ß√£o for verdadeira.

// EXISTEM 3 TIPOS DE LOOPS

// for loop
// O for loop √© usado quando sabemos exatamente quantas vezes o loop deve ser executado. Ele usa uma vari√°vel de controle, que √© inicializada com um valor, testada em rela√ß√£o a uma condi√ß√£o e incrementada ou decrementada a cada itera√ß√£o do loop.
// Ponto de Partida; Ponto de Limite; Incrementa√ß√£o do Ponto de Partida (para que o Loop n√£o seja infinito).
console.log("Loop for")
for(let i = 0; i < 10; i++) {
    console.log(i)
}

// while loop
// O while loop √© usado quando n√£o sabemos exatamente quantas vezes o loop deve ser executado. Ele usa uma condi√ß√£o que √© testada antes de cada itera√ß√£o do loop. Enquanto a condi√ß√£o for verdadeira, o loop continuar√° a ser executado.
console.log("Loop while")
let i = 1;
while (i <= 5) {
  console.log(i);
  i++;
}

// do <this> while loop
// O do...while loop √© semelhante ao while loop, mas a condi√ß√£o √© testada depois da primeira itera√ß√£o do loop. Isso significa que o bloco de c√≥digo dentro do loop ser√° executado pelo menos uma vez, mesmo se a condi√ß√£o for falsa na primeira itera√ß√£o.
console.log("Loop do {} while")
let a = 1;
do {
  console.log(a);
  a++;
} while (a <= 5);

// ATIVIDADES LOOP FOR
console.log("Atividade 1")
function renderUpToTwenty() {
    let renderTwentyArray = []
    for(let i = 0; i <= 20; i++) {
        renderTwentyArray.push (i)
    }
    return renderTwentyArray
}
console.log(renderUpToTwenty())

console.log("Atividade 2")
function tenInTenToAHundred() {
    let toHundredArray = []
    for(let i = 10; i <= 100; i = i + 10) {
        toHundredArray.push(i)
    }
    return toHundredArray
}
console.log(tenInTenToAHundred())

console.log("Atividade 3")
function oddUpToTwenty() {
    let oddsArray = []
    for(let i = 0; i <= 20; i++) {
        if(i % 2 != 0) {
            oddsArray.push(i)
        }
    }
    return oddsArray
}
console.log(oddUpToTwenty())

console.log("Atividade 4")
function evenUpToTwenty() {
    let evenArray = []
    for(let i = 0; i <= 20; i++) {
        if(i % 2 == 0) {
            evenArray.push(i)
        }
    }
    return evenArray
}
console.log(evenUpToTwenty())

console.log("Atividade 5")
function fromNegativeToZero() {
    let negativesArray = []
    for(let i = -10; i <= 0; i++) {
       negativesArray.push(i)
    }
    return negativesArray
}
console.log(fromNegativeToZero())

console.log("Atividade 6")
function inDescendingDirection() {
    let descendingArray = []
    for(let i = 10; i >= 0; i = i - 1) {
        descendingArray.push(i)
    }
    return descendingArray
}
console.log(inDescendingDirection())

console.log("Atividade 7")
function toSquare() {
    let toSqrtArray = []
    for(let i = 1; i <= 10; i++) {
        toSqrtArray.push(`${i}, ${i * i} - `)
    }
    return toSqrtArray
}
console.log(toSquare())

// ATIVIDADE LOOPS FOR II

console.log("Atividade 8")
function toSquareInt() {
    let toSquareArray = []
    for(let i = 15; i <= 200; i++) {
        toSquareArray.push(`${i}, ${i * i} - `)
    }
    return toSquareArray
}
console.log(toSquareInt())

console.log("Atividade 9")
function sumFirstHundred() {
    let sum = 0
    for(let i = 1; i <= 100; i++) {
        sum += i
    }
    return sum
}
console.log(sumFirstHundred())

console.log("Atividade 10")
function divisibleByFour() {
    let byFourArray = []
    for(let i = 0; i < 200; i++) {
        if(i % 4 === 0) {
            byFourArray.push(i)
        }
    }
    return byFourArray
}
console.log(divisibleByFour())

console.log("Atividade 11") 
function sumAndAvg() {
    let sum = 0
    let totEven = 0
    for(let i = 50; i <= 70; i++) {
        if(i % 2 == 0) {
            sum += i
            totEven++
        }
    }
    return `A soma √© ${sum} e a m√©dia √© ${sum / totEven}`
}
console.log(sumAndAvg())

console.log("Atividade 12")
// ‚Å†O, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, ... etc.
function fibonacciNumbers() {
    let anterior = 0;
    let atual = 1;
    let proximo;
    let fibonacciList = []

    for(let i = 1; i <= 15; i++) {
        fibonacciList.push(anterior) // = 0, 1, 1, 
        proximo = atual + anterior // = 1, 2, 3, 
        anterior = atual // = 1, 1, 2, 
        atual = proximo // = 1, 2, 3, 
    }
    return fibonacciList
}

console.log(fibonacciNumbers())

console.log("Atividade 13")
// Colocar um gr√£o de trigo no primeiro quadro e nos quadros seguintes o dobro do quadro anterior.

// Ou seja, no primeiro quadro coloca-se um gr√£o, no segundo quadro colocam-se dois gr√£os (neste momento, tem-se tr√™s gr√£os), no terceiro quadro colocam-se quatro gr√£os (tendo neste momento sete gr√£os), no quarto quadro colocam-se oito gr√£os (tendo-se ent√£o 15 gr√£os) at√© o limite de casas que √© 64. A quantidade de gr√£os adicionados √© sempre o dobro da quantidade anterior.
function chessboardGrains() {
    let anterior = 1 // = 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096
    let total = 0 // = 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095
    for(let i = 1; i <= 64; i++) {
        total += anterior 
        anterior *= 2 
    }
    return total
}
console.log(chessboardGrains())

// LOOP WHILE

// Exemplos

// let codigo = prompt("Digite o c√≥digo enviado para o seu e-mail")

// while(codigo != 1234) {
//     alert("C√≥digo incorreto")
//     codigo = prompt("Digite o c√≥digo correto")
// }
// alert("C√≥digo correto, sua senha pode ser recuperada")
console.log("Exemplos: Loop While")
let counter = 0
console.log(counter, ", Beginning of the Loop")
while (counter < 10) {
    console.log(`Counter is at number ${counter}`)
    counter++
}
console.log("End of Loop")

function timesTwoOddsOnly () {
    let counter = 0
    console.log("Beginning of Loop")
    while(counter <= 10) {
        if(counter % 2 !== 0) {
            console.log(`Counter is currently at number ${counter}, therefore`)
            console.log(`2 x ${counter} = ${counter * 2}`)
        } else {
            console.log(`Counter is currently at number ${counter}`)
        }
        counter++
    }
    console.log("End of Loop")
}
console.log(timesTwoOddsOnly())

// üí™ Atividade - Loops while
console.log("Atividades com Loop While")
console.log("Atividade 1")

function breakfastOrder() {
let choice = parseInt(prompt("Digite o c√≥digo do produto ou 0 para sair:\n 101: Cachorro Quente\n 102: Bauru Simples\n 103: Bauru com Ovo\n 104: Hamburguer"))
let totalOrderValue = 0
let quantity = 0

while(choice != 0) {
    if(choice == 100) {
        quantity = parseInt(prompt("Quantos voc√™ deseja?"))
        totalOrderValue += quantity * 1.20
    }else if(choice == 101) {
        quantity = parseInt(prompt("Quantos voc√™ deseja?"))
        totalOrderValue += quantity * 1.20
    }else if(choice == 102) {
        quantity = parseInt(prompt("Quantos voc√™ deseja?"))
        totalOrderValue += quantity * 1.30
    }else if(choice == 103) {
        quantity = parseInt(prompt("Quantos voc√™ deseja?"))
        totalOrderValue += quantity * 1.50
    }else if(choice == 104) {
        quantity = parseInt(prompt("Quantos voc√™ deseja?"))
        totalOrderValue += quantity * 1.20
    } else {
        alert("Produto n√£o existente!")
    }
    choice = parseInt(prompt("Digite o c√≥digo do produto ou 0 para sair:\n 101: Cachorro Quente\n 102: Bauru Simples\n 103: Bauru com Ovo\n 104: Hamburguer"))
}
alert(`Valor total do pedido: $${totalOrderValue}`)
console.log(`Valor total do pedido: $${totalOrderValue}`)
}
console.log(`execute a fun√ß√£o breakfastOrder() para ver o resultado`)

console.log("Atividade 2")
function zeroToTen() {
    let number = parseInt(prompt(`Digite um n√∫mero v√°lido de 0 a 10`))

    while(number < 0 || number > 10) {
        alert(`Digite um n√∫mero v√°lido de 0 a 10`)
        number = parseInt(prompt(`Tente novamente`))
    }
    alert(`O n√∫mero ${number} √© um n√∫mero v√°lido`)
}
console.log(`Execute a fun√ß√£o zeroToTen() para ver o resultado`)

console.log("Atividade 3")
function signUp() {
    let username = prompt(`Digite seu nome de usu√°rio`)
    let password = prompt(`Digite a sua senha`)

    while(password.includes(username)) {
        alert(`Sua senha n√£o pode conter seu nome de usuario`)
        password = prompt(`Tente novamente`)
    }
    alert(`Conta criada com sucesso!`)
}
console.log(`Execute a fun√ß√£o signUp() para ver o resultado`)

console.log("Atividade 4")
function sumBetweenZeroTen () {
    let number = parseInt(prompt(`Insira um n√∫mero`))
    let sumTotal = 0
    let quantity = 0
    while(number >= 1 && number <= 10) {
        sumTotal += number
        quantity++
        number = parseInt(prompt(`Insira outro n√∫mero`))
    }
    alert(`A soma dos n√∫meros digitados, exceto o √∫ltimo, √© de ${sumTotal} e a m√©dia da soma √© ${sumTotal / quantity}`)
}
console.log(`Execute a fun√ß√£o sumBetweenZeroTen() para ver o resultado`)

console.log("Atividade 5")
function castYourVote() {
    let vote = prompt(`Insira o seu voto:\nCandidato A = A\nCandidato B = B\nCandidato C = C`)
    let candidateA = 0
    let candidateB = 0
    let candidateC = 0
    let endVote = "x"
    while(vote.toLowerCase() !== endVote) {
        if(vote.toLowerCase() == "a") {
            candidateA++
            alert(`Voto registrado com sucesso!`)
        } else if(vote.toLowerCase() == "b") {
            candidateB++
            alert(`Voto registrado com sucesso!`)
        }else if(vote.toLowerCase() == "c") {
            candidateC++
            alert(`Voto registrado com sucesso!`)
        }else {
            alert(`Candidato n√£o encontrado`)
        }
        vote = prompt(`Insira o seu voto:\nCandidato A = A\nCandidato B = B\nCandidato C = C`)
    }
    alert(`Contagem dos Votos:\nCandidato A: ${candidateA}\nCandidato B: ${candidateB}\nCandidato C: ${candidateC}`)
}
console.log(`Execute a fun√ß√£o castYourVote() para ver o resultado`)


// ARRAYS
console.log(">>> ARRAYS <<<")

// Arrays s√£o uma estrutura de dados fundamental em programa√ß√£o. Eles s√£o usados para armazenar cole√ß√µes de valores relacionados, como uma lista de n√∫meros ou uma lista de nomes

let exampleArray = [1, "A string", true, 50.13]
console.table(exampleArray)

// Acessando os valores

// Voc√™ pode acessar elementos individuais do array usando o operador de colchetes ([ ]) e o √≠ndice do elemento que deseja acessar.

// Podemos ver o valor localizado em determinado √≠ndice pelo console.table()
console.log(exampleArray[1]) // Output: "A string"

// Metodos usados em Arrays

// Em JavaScript, os arrays s√£o objetos que possuem muitos m√©todos nativos para manipular seus elementos. Alguns dos principais m√©todos de arrays em JS s√£o:

// .push(): adiciona um ou mais elementos ao final do array e retorna o novo comprimento do array.

// .pop(): remove o √∫ltimo elemento do array e o retorna.

// .shift(): remove o primeiro elemento do array e retorna o elemento removido. Todos os outros elementos do array s√£o movidos para um √≠ndice menor.

// .unshift(): adiciona um ou mais elementos ao in√≠cio do array e retorna o novo comprimento do array. Todos os outros elementos do array s√£o movidos para um √≠ndice maior.

// .length: retorna o n√∫mero de elementos que est√£o atualmente contidos no array.


// LOOPS EM ARRAYS

// Imagine que temos uma lista com nomes de usu√°rios e queremos mostrar na tela cada um desses nomes. Podemos utilizar da estrutura de repeti√ß√£o para montar uma l√≥gica para mostrar na tela todos os elementos desse array.

// Exemplo

let users = ['John', 'Marie', 'Peter', 'Nicole', 'Riley', 'Adriana', 'Abella', 'Lena']

for(let i = 0; i < users.length; i++) {
    console.log('√çndice:', i, users[i])
}

// Capturando um nome espec√≠fico no Array
console.log(users[2]) // Output: 'Peter'

// Adicionando um nome no Array
users.push('Mia')
console.log(users) // Output: users + 'Mia'

// Removendo o √∫ltimo elemento do Array
users.pop()
console.log(users) // Output: users - 'Mia'

// Removendo o primeiro elemento do array
users.shift()
console.log(users) // Output: users - 'John'

// Adicionando um nome ao in√≠cio do Array
users.unshift('Sasha')
console.log(users) // Output: 'Sasha' + users

// EXERC√çCIOS

console.log("Atividade 1")

function insertOnArray(string) {
    let emptyArray = []
        if(string.length >= 5 && typeof string === 'string') {
            emptyArray.push(string)
        }
    return emptyArray
}
console.log(insertOnArray("Texto"))

console.log("Atividade 2")

function theatre(number) {
    let characters = [
    "Hermanoteu", 
    "Olon√©ia", 
    "Micalat√©ia", 
    "Godah"
    ]
    if(number >= 0 && number < characters.length) {
        return characters[number]
    } else {
        return "Personagem n√£o encontrado"
    }
}
console.log(theatre(2))

console.log("Atividade 3")

function integNumber(number) {
    let numArray = [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
    ]
    if(numArray[number] % 2 == 0) {
        return "O valor encontrado nesta posi√ß√£o √© par"
    } else if(numArray[number] % 2 != 0) {
        return "O valor encontrado nesta posi√ß√£o √© √≠mpar"
    }
}
console.log(integNumber(1))

console.log("Atividade 4")

let namesArray = [
    "Pedro",
    "Rafael",
    "Jos√©"
]

function manyNames(nameList) {
    let biggestName = ""
    for(let i = 0; i < namesArray.length; i++) {
        const currentIndex = nameList[i]
        if(currentIndex.length > biggestName.length) {
            biggestName = currentIndex
        }
    }
    return `O nome ${biggestName} √© o maior da lista.`
}
console.log(manyNames(namesArray))

console.log("Atividade 5")

let integerArray = [
    1,
    4,
    6,
    9,
    11,
    8
]

function sumValues(numberList) {
    let sum = 0
    sum = numberList[numberList.length -1] + numberList[numberList.length -2]
    if(sum % 2 == 0) {
        return "A soma √© um m√∫ltiplo de 2"
    } else {
        return "A soma n√£o √© um m√∫ltiplo de 2"
    }
}
console.log(sumValues(integerArray))

console.log("Atividade 6")

namesArray = [
    "Pedro", 
    "Rafael", 
    "Jos√©", 
    "Carla", 
    "Maria", 
    "Josef", 
    "Raquel"
]

function manyOtherNames(nameList, name, number) {
    let position = nameList[number]
    if(position === name && number < nameList.length) {
        return "Acertei!"
    } else if(position !== name && number < nameList.length) {
        return "N√£o √© quem eu pensava!"
    } else {
        return "O n√∫mero tem que ser entre 0 e 6"
    }
}
console.log(manyOtherNames(namesArray, "Raquel", 6))

console.log("Atividade 7")

let numberArrayOne = [
    1,
    2,
    3,
    4,
    5,
    6,
    10,
    7]

let numberArrayTwo = [
    5,
    7,
    9,
    4,
    2,
    3,
    9
]

function whosBigger(listOne, listTwo) {
    if(listOne.length > listTwo.length) {
        return `A maior lista √© a lista cujo √∫ltimo n√∫mero √©: ${listOne[listOne.length - 1]}`
    } else {
        return `A maior lista √© a lista cujo √∫ltimo n√∫mero √©: ${listTwo[listTwo.length - 1]}`
    }
}
console.log(whosBigger(numberArrayOne, numberArrayTwo))

console.log("Os pr√≥ximos exerc√≠cios s√£o todos baseados neste array")
const elementList = [
    1,
    5,
    7,
    9,
    3, 
    "10", 
    "11", 
    "15"
]
console.table(elementList)

console.log("Atividade 8")

function returnAllElements() {
    return console.log(elementList)
}
returnAllElements()

console.log("Atividade 9")

function returnSpecificValue (number) {
    let value = elementList[number]
    if(!isNaN(number) && 
    number >= 0 && 
    number < elementList.length) {
    return `O valor contido nesta posi√ß√£o √©: ${value}`
    } else {
        return "Por favor, insira apenas n√∫meros"
    }
}
console.log(returnSpecificValue(5))

console.log("Atividade 10")

function returnElementType(index) {
    let element = elementList[index];
    if (typeof element === "number") {
        return `O elemento ${element} √© um elemento do tipo n√∫mero`;
    } else if (typeof element === "string") {
        return `O elemento ${element} √© um elemento do tipo string/texto`;
    } else {
        return `O elemento ${element} √© um elemento do tipo ${typeof element}`;
    }
}
console.log(returnElementType(5))

console.log("Atividade 11")

function removeLastStringElement() {
    if(typeof elementList[elementList.length -1] == "string") {
        elementList.pop()
        console.log(elementList)
        return `Elemento deletado com sucesso`
    } else {
        return `Falha ao remover o elemento da lista`
    }
}
console.log(removeLastStringElement())

console.log("Atividade 12")

function positionSearch(position) {
    for(let i = 0; i < elementList.length; i++) {
        if(position === elementList[i]) {
            return `O valor procurado est√° na posi√ß√£o: ${i}`
        }
    }
    return `Valor n√£o encontrado`
}
console.log(elementList)
console.log(positionSearch("11"))

console.log("Atividade 13")

function removeSpecificElement(elements) {
    let searchForIndex = elementList.indexOf(elements)
    if(elementList.includes(elements)) {
       elementList.splice(searchForIndex, 1)
       console.log(elementList)
       return `Elemento ${elements} deletado com sucesso!`
    }
    console.log(elementList)
    return `Elemento n√£o encontrado`
}
console.log(removeSpecificElement(1))

console.log("Atividade 14")

function insertOnRightPosition(elements) {
    if(elements >= 0 &&
    elements <= 10 &&
    typeof elements === "number") {
        elementList.unshift(elements)
        console.log(`O n√∫mero ${elements} foi adicionado ao in√≠cio da lista`)
        console.log(elementList)
        return `Lista atualizada com sucesso`
        } else if(typeof elements === "string") {
            elementList.push(elements)
            console.log(`A string ${elements} foi adicionada ao final da lista`)
            console.log(elementList)
            return `Lista atualizada com sucesso`
        } else {
            console.log(elementList)
            return `O valor ${elements} n√£o √© um n√∫mero, nem uma string (${elements} is a ${typeof elements}). Portanto, n√£o pode ser adicionado a lista`
        }
}
console.log(insertOnRightPosition("15"))

// MANIPULA√á√ÉO DE LOOPS

console.log(">>> MANIPULA√á√ÉO DE LOOPS")

console.log("Atividade 15")

function verticalText(string) {
    for(let i = 0; i < string.length; i++) {
        if(typeof string == "string") {
            console.log(string[i])
        }
    }
}
console.log(verticalText("Frontend"))

console.log("Atividade 16")

function incrementText (string) {
    let word = ""
    for(let i = 0; i < string.length; i++) {
        if(typeof string == "string") {
            word += string[i]
            console.log(word)
        }
    }
}
console.log(incrementText("Backend"))

console.log("Atividade 17")

function incrementTextBackwards(string) {
    let word = ""
    for(let i = string.length - 1; i >= 0; i--) {
        if(typeof string == "string") {
            word = string[i] + word
            console.log(word)
        }
    }
}
console.log(incrementTextBackwards("Fullstack"))

console.log("Atividade 18")

function padEnd(string, times, repeat) {
    let finalWord = string
    for(let i = 0; i < times; i++) {
        if(typeof string == "string") {
            finalWord += repeat
        }
    }
    return finalWord
}
console.log(padEnd("Ahh lelek ", 5, "lek"))

console.log("Atividade 19") 

function subString(string, pos1, pos2) {
    let finalWord = ""
    for(let i = pos1; i < pos2; i++) {
        if(typeof string == "string" &&
        i != pos1 &&
        i != pos2) {
            finalWord += string[i]
        }
    }
    return finalWord
}
console.log(subString("Mozilla", 0, 4))

console.log("Atividade 20")

function stringRepeater(string, repeat) {
    let finalWord = ""
    for(let i = 0; i < repeat; i++) {
        if(typeof string == "string") {
            finalWord += string
        }
    }
    return finalWord
}
console.log(stringRepeater("Refr√£o da m√∫sica. ", 3))

console.log("Atividade 21")

function stringCentralizer(string, repeat, border) {
    let finalWord = ""
    for(let i = 0; i < repeat; i++) {
        if(typeof string == "string") {
            finalWord+= border
        }
    }
    return `${finalWord} > ${string} < ${finalWord}`
}
console.log(stringCentralizer("Ariadne", 3, "Eu Te Amo "))

// Tamb√©m pode ser feito como: let finalWord = ` ${string} `
// for(let i = 0; i < repeat; i++) {
//      finalWord = border + finalWord + border}
// return finalWord

function isPalindrome(str) {
    // Remove non-alphanumeric characters and convert to lowercase
    const cleanStr = str.replace(/ /g, '').toLowerCase();
    let forwards = "";
    let backwards = "";
    // Build forwards and backwards strings
    for (let i = 0; i < cleanStr.length; i++) {
        forwards += cleanStr[i];
        backwards = cleanStr[i] + backwards;
    }
    // Check if forwards is equal to backwards
    return forwards === backwards;
}

function findMin(arr) {
    let min = 0; // Assume the minimum number is 0 initially
    for (let i = 0; i < arr.length; i++) {
        if (i === 0 || arr[i] < min) {
            min = arr[i]; // Update min if a smaller number is found
        }
    }
    return min;
}

const numbers = [3, 1, 7, 2, 5];
const minNumber = findMin(numbers);
console.log("Minimum number:", minNumber); // Output: 1


// ARRAYS ANINHADOS

// Arrays aninhados em JavaScript, tamb√©m conhecidos como arrays multidimensionais, s√£o arrays que cont√™m outros arrays como elementos. Isso significa que cada elemento de um array aninhado √©, na verdade, outro array.

// Array aninhado
const arrayAninhado = [
    [1, 2, 3], // Indice 0 (Sub-√çndices: 0, 1, 2)
    [4, 5, 6], // Indice 1 (Sub-√çndices: 0, 1, 2)
    [7, 8, 9], // Indice 2 (Sub-√çndices: 0, 1, 2)
];
  
// Acessando o terceiro sub-array (indice 2 do arrayAninhado)
const terceiroSubArray = arrayAninhado[2];
console.log(terceiroSubArray);
// Sa√≠da: [7, 8, 9]
  
/*
    Acessando o primeiro elemento do terceiro sub-array
*/
const valorSete = arrayAninhado[2][0];
console.log(valorSete); // Sa√≠da: 7

// Para navegar entre as posi√ß√µes de um array aninhado em JS, √© poss√≠vel utilizar um ou mais loops, dependendo do n√≠vel de aninhamento. Suponha que temos um array aninhado de instrumentos musicais, em que cada sub-array representa uma categoria de instrumento e cont√©m uma lista de instrumentos nessa categoria. Podemos navegar por todas as posi√ß√µes desse array utilizando loops aninhados, como no exemplo abaixo:

const instrumentos = [
    ["Bateria", "Pandeiro", "Repinique"], // Percuss√£o
    ["Viol√£o", "Guitarra", "Baixo"], // Corda
    ["Flauta", "Saxofone", "Trompete"], // Sopro
];
  
// Primeiro for itera sobre o array instrumentos
for (let i = 0; i < instrumentos.length; i++) {
// Segundo for itera sobre cada sub-array
    for (let j = 0; j < instrumentos[i].length; j++) {
        console.log(instrumentos[i][j]);
    }
}

console.log('üí™ Atividade - Trabalhando com Arrays II')

console.log('Atividade 1')
// Escreva uma fun√ß√£o que receba uma lista a de dimens√£o 30 composta apenas por n√∫meros inteiros. A fun√ß√£o deve retornar a quantidade de valores pares e √≠mpares existentes na lista recebida.

let oneToThirty = []
for(let i = 1; i <= 30; i++) {
    oneToThirty.push(i)
}

function oddsAndEvens(list) {
    let odds = 0
    let evens = 0

    for(let i = 0; i < list.length; i++) {
        if(list[i] % 2 === 0) {
            evens++
        } else {
            odds++
        }
    }
    return `A lista recebida possui ${evens} elementos pares e ${odds} elementos √≠mpares`
}

console.log('Atividade 2')
// Escreva uma fun√ß√£o que recebe uma lista b de tamanho 10, composta por n√∫meros inteiros.‚Å† Retorne o total de elementos √≠mpares existentes na matriz e tamb√©m o percentual do valor total de n√∫meros √≠mpares em rela√ß√£o √† quantidade total de elementos armazenados na matriz.

let oneToTen = []
for(let i = 1; i <= 10; i++) {
    oneToTen.push(i)
}

function oddsAndPercentage(list) {
    let numTotal = 0
    let odds = 0

    for(let i = 0; i < list.length; i++) {
        numTotal++
        if(list[i] % 2 !== 0) {
            odds++
        }
    }
    return `O total de valores √≠mpares √© ${odds} e corresponde a ${(odds / numTotal) * 100}% da lista`
}

console.log('Atividade 3')
// Escreva uma fun√ß√£o que receba como par√¢metro duas listas a e b, cada uma com dez elementos. ‚Å†A fun√ß√£o deve realizar a valida√ß√£o do tamanho da lista. Caso sejam maiores ou menores que 10, retorne: "Lista fora dos padr√µes necess√°rios".
// A lista a deve ser composta por valores divis√≠veis por 2 e 3, enquanto a lista b deve ser composta apenar por valores m√∫ltiplos de 5. ‚Å†A composi√ß√£o das listas deve ser validada pela fun√ß√£o. Caso a composi√ß√£o n√£o esteja correta, retorne: "Valores n√£o permitidos encontrados".

let byTwoAndThree = []
for(let i = 1; i <= 100; i++) {
    if(byTwoAndThree.length >= 10) {
        break
    }
    if(i % 3 === 0 &&
        i % 2 === 0) {
            byTwoAndThree.push(i)
    }
}

let timesFive = []
for(let i = 1; i <= 10; i++) {
    let multiply = i * 5
    timesFive.push(multiply)
}

function listWithTen(listA, listB) {
    if(listA.length !== 10 ||
        listB.length !== 10)
        return `Lista fora dos padr√µes necess√°rios`
    for(let i = 0; i < listA.length; i++) {
        if(listA[i] % 2 !== 0 &&
            listA[i] % 3 !== 0 ||
            listB[i] % 5 !== 0) {
                return `Valores n√£o permitidos encontrados`
        }
    }
    return console.log(byTwoAndThree, timesFive)
}

console.log('üí™ Atividade - Loops, Fun√ß√µes e Arrays')

console.log('Atividade 1')
// Escreva uma fun√ß√£o que consiga inserir novos elementos em uma lista. A lista pode armazenar no m√°ximo 10 elementos. ‚Å†Elementos do tipo string com mais de 7 caracteres n√£o s√£o permitidos. 
// Em caso de sucesso, retorne: "Elemento inserido com sucesso, a lista agora √©: x" sendo x lista atualizada. 
// Em caso de falha, retorne: "N√£o foi poss√≠vel inserir este valor"

let emptyList = []

function insertNewElements(list, element) {
    if(list.length < 10) {
        if(typeof element === 'string') {
            if(element.length > 7) {
                return `Insira palavras com 7 letras ou menos`
            } else {
                list.push(element)
                return `Elemento inserido com sucesso! A lista agora √© ${list}`
            }
        } else {
            list.push(element)
            return `Elemento inserido com sucesso! A lista agora √© ${list}`
        }
    }
    return `N√£o foi poss√≠vel inserir este valor`
}

console.log('Atividade 2')
// Escreva uma fun√ß√£o que recebe uma lista a como par√¢metro. A lista a deve ter exatamente 15 elementos inteiros. ‚Å†Crie tamb√©m uma lista b de mesmo tipo, observando a seguinte lei de forma√ß√£o: 
// "Todo elemento da matriz b deve ser o quadrado do elemento da matriz a correspondente". 

let oneToFifteen = []
let squareOf = []
for(let i = 1; i <= 15; i++) {
    oneToFifteen.push(Math.floor(Math.random() * (100 - 1 + 1)) + 1)
}

function returnSquare(listA) {
    for(let i = 0; i < listA.length; i++) {
        let helper = listA[i] ** 2
        squareOf.push(helper)
    }
    for(let i = 0; i < listA.length; i++) {
        if(squareOf[i] !== listA[i] ** 2) {
            return `O n√∫mero${squareOf[i]} n√£o √© o quadrado de ${listA[i]}`
        }
    }
    return squareOf
}

console.log('üí™ Atividade - Caixa de Suprimentos')
// Nessa atividade vamos treinar nossos conhecimentos em Arrays aninhados.

console.log('Atividade - Itens para acampar')

// Voc√™ e seus amigos decidiram ir acampar. Antes de mais nada fizeram uma lista, onde cada amigo deve comprar 5 itens para levar para a viagem.

// Cada amigo ficou respons√°vel por uma se√ß√£o de itens. As se√ß√µes s√£o: Higiene, Alimenta√ß√£o, Farm√°cia e Lazer. Seus amigos devem trazer exatamente cinco itens de cada se√ß√£o. Todos os itens ser√£o colocados juntos na caixa de suprimentos.

// Cada amigo representa um array e a caixa de suprimentos √© a composi√ß√£o destes arrays. Voc√™ deve colocar os itens dentro da caixa de forma organizada, separando as se√ß√µes, afinal de contas, n√£o queremos nossos marshmallows com gosto de desinfetante.

// CONDI√á√ïES

// Os amigos n√£o podem comprar mais ou menos do que cinco itens, ou seja, tem que ser exatamente cinco itens.

// Caso algu√©m compre mais itens ou menos itens, voc√™ dever√° retornar uma mensagem.

let higiene = []
let food = []
let medicine = []
let leisure = []
let supplyBox = [higiene, food, medicine, leisure]

function letsGoCamping(supplies) {
    if(supplies.length < 4) {
        return `Algum amigo ainda n√£o retornou com os itens`
    }
    if(supplies.length > 4) {
        return `Acho que temos um intruso`
    }
    if(supplies.length === 4) {
        for(let i = 0; i < supplies.length; i++) {
            if(supplies[i].length < 5) {
                return `Precisamos de mais itens desta se√ß√£o`
            }
            if(supplies[i].length > 5) {
                return `Tem itens demais, n√£o precisamos de tanto`
            }
        }
        return `Podemos ir acampar`
    }
}

function shopForSupplies(supplies, section, item) {
    if(supplies.length !== 4) {
        return `Precisamos de mais tipos de suprimentos`
    }
    if(section.length < 5) {
        section.push(item)
        console.log(`Item ${item} adicionado a ${section}`)
    } else {
        return `Temos itens suficiente em ${section}`
    }
    return supplies
}

